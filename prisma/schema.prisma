datasource db {
  provider = "mongodb"
  url      = env("DB_URI")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
  role           Role            @default(USER)

  posts              Post[]
  comments           Comment[]
  likes              Like[]
  activities         UserActivity[]
  userSessions       UserSession[]
  searchHistory      SearchHistory[]
  interactions       UserInteraction[] @relation("InteractingUser")
  shares             Share[]
  blockedUsers       UserBlock[]       @relation("BlockingUsers")
  notifications      Notification[]
  followers          Follow[]          @relation("Followers")
  following          Follow[]          @relation("Following")
  targetInteractions UserInteraction[] @relation("TargetUser")
  blockedByUsers     UserBlock[]       @relation("BlockedUsers")
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  refresh_token_expires_in Int?
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?

  @@unique([provider, providerAccountId])
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessionToken String   @unique
  expires      DateTime

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Hashtag {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  name  String   @unique
  posts String[] @db.ObjectId
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  isShared       Boolean   @default(false)
  originalPost   Post?     @relation("SharedPosts", fields: [originalPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  originalPostId String?   @db.ObjectId
  comments       Comment[]
  likes          Like[]
  media          Media[]
  shares         Share[]
  hashtags       String[]  @db.ObjectId
  sharedPosts    Post[]    @relation("SharedPosts")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  post   Post   @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId String @db.ObjectId

  parentId      String?   @db.ObjectId
  parentComment Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies       Comment[] @relation("CommentReplies")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  post   Post   @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId String @db.ObjectId

  @@unique([userId, postId])
}

model Follow {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower   User   @relation("Following", fields: [followerId], references: [id])
  followerId String @db.ObjectId

  following   User   @relation("Followers", fields: [followingId], references: [id])
  followingId String @db.ObjectId

  @@unique([followerId, followingId])
}

model Media {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url   String
  type  MediaType
  order Int

  post   Post   @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId String @db.ObjectId
}

enum MediaType {
  IMAGE
  VIDEO
}

model UserActivity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  activityType ActivityType

  targetId String? @db.ObjectId

  metadata Json?
}

enum ActivityType {
  LOGIN
  LOGOUT
  VIEW_PROFILE
  EDIT_PROFILE
  CREATE_POST
  EDIT_POST
  DELETE_POST
  LIKE_POST
  UNLIKE_POST
  COMMENT
  DELETE_COMMENT
  FOLLOW
  UNFOLLOW
  SEARCH
  SHARE_POST
  BLOCK_USER
  UNBLOCK_USER
}

model UserSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  startTime DateTime  @default(now())
  endTime   DateTime?
  device    String?
  ipAddress String?
  location  String?
}

model SearchHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  query String
}

model UserInteraction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation("InteractingUser", fields: [userId], references: [id])
  userId String @db.ObjectId

  targetUser   User   @relation("TargetUser", fields: [targetUserId], references: [id])
  targetUserId String @db.ObjectId

  interactionType InteractionType
}

enum InteractionType {
  PROFILE_VIEW
  MESSAGE_SENT
  FOLLOW
  UNFOLLOW
}

model Share {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId String @db.ObjectId

  sharedBy   User   @relation(fields: [sharedById], references: [id])
  sharedById String @db.ObjectId

  sharedTo ShareTarget
}

enum ShareTarget {
  PUBLIC
  FRIENDS
  SPECIFIC_USERS
}

model UserBlock {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blocker   User   @relation("BlockingUsers", fields: [blockerId], references: [id])
  blockerId String @db.ObjectId

  blocked   User   @relation("BlockedUsers", fields: [blockedId], references: [id])
  blockedId String @db.ObjectId

  reason String?

  @@unique([blockerId, blockedId])
}

model FeatureFlag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String  @unique
  enabled Boolean
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  type    NotificationType
  content String
  isRead  Boolean          @default(false)
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
}
